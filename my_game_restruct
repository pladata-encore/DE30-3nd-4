import pygame
from pygame import display
import sys
import random
import time
import math

# 이미지를 주변 공백을 제거하여 새로운 이미지로 반환하는 함수
# def trim_image(image):
#     # 이미지의 투명도를 인식하기 위해 convert_alpha() 메서드를 사용
#     image = image.convert_alpha()
#     # 이미지의 사각 영역을 가져옴
#     rect = image.get_rect()
#     # 이미지를 감싸는 최소한의 영역을 찾음
#     mask = pygame.mask.from_surface(image)
#     left, top, right, bottom = rect.left, rect.top, rect.right, rect.bottom
#     for x in range(rect.width):
#         for y in range(rect.height):
#             if mask.get_at((x, y)):
#                 left = min(left, x)
#                 top = min(top, y)
#                 right = max(right, x)
#                 bottom = max(bottom, y)
#     # 새로운 이미지에 해당 영역만 복사
#     new_image = pygame.Surface((right - left + 1, bottom - top + 1), pygame.SRCALPHA)
#     new_image.blit(image, (0, 0), (left, top, right - left + 1, bottom - top + 1))
#     return new_image

#     # 주변 공백이 있는 이미지를 로드
#     image_with_padding = pygame.image.load('C:/Users/Playdata/Desktop/plane.png')

#     # 주변 공백을 제거한 이미지 생성
#     trimmed_image = trim_image(image_with_padding)

#     # 결과 출력
#     screen = pygame.display.set_mode(trimmed_image.get_size())
#     screen.blit(trimmed_image, (0, 0))
#     pygame.display.flip()


class Airplane():
    def __init__(self,x,y): 
        # self.filepath = filepath
        self.image = pygame.image.load('C:/Users/Playdata/Desktop/plane.png')  # 비행기 이미지 로드
        # self.image = image
        self.image = pygame.transform.scale(self.image,(37,37)).convert_alpha()
        # self.image = trim_image(self.image)
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.speed = 0.8
    def draw(self, screen):
        screen.blit(self.image, self.rect)

    def move(self, dx, dy):
        self.rect.x += dx
        self.rect.y += dy

class Missile:
    def __init__(self, x, y):
        self.image = pygame.image.load('C:/Users/Playdata/Desktop/bullet_1.png')
        self.image = pygame.transform.scale(self.image,(20,20))
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.speed = -1
    def draw(self, screen):
        screen.blit(self.image, self.rect)
    def update(self):
        self.rect.y += self.speed

class Ailens:
    def __init__(self,screen_width):
        self.image = pygame.image.load('C:/Users/Playdata/Desktop/enemy.png')
        self.image = pygame.transform.scale(self.image,(30,30))
        self.rect = self.image.get_rect()
        self.rect.x = random.randrange(screen_width - self.rect.width)  # x 위치 랜덤 설정
        self.rect.y = -30
        self.speed = 1
    def draw(self,screen): 
        screen.blit(self.image, self.rect)
    def update(self):
        self.rect.y += self.speed
        # print(self.rect.y)

def draw_score(screen,score):
    font = pygame.font.SysFont('arial', 20)  # 폰트 설정
    text = font.render(f"Score: {score}", True, (255, 255, 255))  # 점수 텍스트 렌더링
    screen.blit(text, (10, 10))  # 화면에 텍스트 그리기
def draw_time(screen,time):
    second = math.floor(time/1000)
    minutes = math.floor(time/(1000*60))
    font = pygame.font.SysFont('arial', 20)  # 폰트 설정
    text = font.render(f"time: {minutes:02}:{second:02}", True, (255, 255, 255))  # 점수 텍스트 렌더링
    screen.blit(text, (250, 10))

def main(): 
    pygame.init()
    score=0
    # 창 크기 설정
    screen_width = 373
    screen_height = 593
    screen = pygame.display.set_mode((screen_width, screen_height))

    # 창 제목 설정
    pygame.display.set_caption("히히발싸")

    # 배경 설정
    bg_1 = pygame.image.load('C:/Users/Playdata/Desktop/screen.jpg')

    # 비행기 이미지 설정
    image_with_padding = pygame.image.load('C:/Users/Playdata/Desktop/plane.png')

    # 비행기 객체 생성
    plane = Airplane(screen_width // 2, screen_height - 50)

    # 적 리스트
    enemies = []

    # 미사일 리스트
    missiles = []

    # 적 생성 시간 추적
    enemy_timer = pygame.time.get_ticks()

    clock = pygame.time.Clock()

    # 게임 진행
    running = True
    while running:
        current_time = pygame.time.get_ticks()
        # dt = clock.tick(300)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif pygame.key.get_pressed()[pygame.K_q]:
                running = False
            # 입력이 스페이스바일때 미사일 객체 생성
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    missile = Missile(plane.rect.centerx, plane.rect.top)
                    missiles.append(missile)


        # 키 입력으로 이동
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            if plane.rect.centerx < 0:
                pass
            else:
                plane.move(-plane.speed, 0)
        if keys[pygame.K_RIGHT]:
            if plane.rect.centerx > screen_width:
                pass
            else:
                plane.move(plane.speed, 0)
        if keys[pygame.K_UP]:
            if plane.rect.centery < 0:
                pass
            else:
                plane.move(0, -plane.speed)
        if keys[pygame.K_DOWN]:
            if plane.rect.centery > screen_height:
                pass
            else:
                plane.move(0, plane.speed)

        # 화면 채우기
        screen.blit(bg_1, (0, 0))

        # 비행기 그리기
        plane.draw(screen)

        # draw_score(screen,score) 

        # 일정 시간마다 적 생성
        if current_time - enemy_timer > 500:  # 1000ms = 1초
            enemy = Ailens(screen_width)
            enemies.append(enemy)
            enemy_timer = current_time  # 현재 시간으로 업데이트

        # 적 업데이트 및 그리기
        for e in enemies[:]:
            e.update()
            e.draw(screen)
            # 적이 화면 밖으로 나가면 리스트에서 제거
            if e.rect.y > screen_height:
                enemies.remove(e)

            if e.rect.colliderect(plane.rect):
                running = False
                print("Collision with plane!")

            for missile in missiles[:]:
                if missile.rect.colliderect(e.rect):
                    enemies.remove(e)
                    missiles.remove(missile)
                    print("Enemy hit!")
                    score += 10  # 점수 증가


        # 미사일 업데이트 및 그리기
        for missile in missiles[:]:
            missile.update()
            missile.draw(screen)
            # 미사일이 화면 밖으로 나가면 리스트에서 제거
            if missile.rect.bottom < 0:
                missiles.remove(missile)
        
        draw_score(screen,score)
        draw_time(screen,current_time)
        
        # 화면 업데이트
        pygame.display.flip()
        # clock.tick(240)      

    # 게임 종료
    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
